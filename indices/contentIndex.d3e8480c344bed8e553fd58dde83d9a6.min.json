{"/":{"title":"Home","content":"\n# Oi\n\n[Autenticando](Tutoriais/autenticando.md)","lastmodified":"2022-07-20T20:15:57.389243379Z","tags":null},"/.":{"title":"","content":"","lastmodified":"2022-07-20T20:15:57.389243379Z","tags":null},"/Tutoriais/Criando-um-atalho-de-terminal-para-o-VSCode":{"title":"","content":"# ","lastmodified":"2022-07-20T20:15:57.389243379Z","tags":null},"/Tutoriais/Manual-de-comandos-de-Git":{"title":"","content":"# Comandos\n\n# 01\n\n**git init** ‚Üí Utilizado parainicializar um reposit√≥rio git (s√≥ deve ser feito para criar um novo reposit√≥rio local)\n\nSintaxe: `git init`\n\n# 02\n\n**git clone** ‚Üí Clona um reposit√≥rio j√° existente no github.\n\nSintaxe: `git clone \u003c\u003curl-do-repo.git\u003e\u003e`\n\n# 03\n\n**git config** ‚Üí Necess√°rio para configurar o git para uso pela primeira vez.\n\nSintaxe:\n\n`git config --list`‚Üí lista as configura√ß√µes do git\n\n`git config --global user.email fulanodetal@exemplo.br` ‚Üí configura o email do usu√°rio. Deve ser o mesmo da conta do GitHub\n\n`git config --global user.name \"Fulano de Tal\"` ‚Üí configura o nome do usu√°rio.\n\n# 04\n\n**git branch** ‚Üí Lista todas as branches presentes naquelereposit√≥rio\n\nSintaxe: `git branch`\n\n\u003caside\u003e üí° Digite :WQ para sair da lista que foi aberta\n\n\u003c/aside\u003e\n\n# 05\n\n**git branch \u003c\u003cnome da branch\u003e\u003e** ‚Üí Cria uma nova branch com o nome escolhido\n\nSintaxe: `git branch exemplo-de-nome`\n\n# 06\n\n**git checkout \u003c\u003cnome da branch\u003e\u003e** ‚Üí entra na branch com o nome selecionado\n\nSintaxe: `git checkout exemplo-de-nome`\n\n\u003caside\u003e üí° B√¥nus: podemos combinar os dois comandos acima usando `git checkout -b exemplo-de-nome`. Dessa forma criamos a branch e a acessamos.\n\n\u003c/aside\u003e\n\n# 07\n\n**git status** ‚Üí lista as mudan√ßas realizadas na branch desde o √∫ltimo commit\n\nSintaxe: `git status`\n\n\u003caside\u003e üí° Digite :WQ para sair da lista que foi aberta\n\n\u003c/aside\u003e\n\n# 08\n\n**git add** ‚Üí Adiciona arquivos para o commit. Pode ser feito arquivo por arquivo ou adicionar a pasta inteira do projeto.\n\nSintaxe:\n\n`git add -- all` ‚Üí Adiciona todos os arquivos que ainda n√£o foram adicionados\n\n`git add .` ‚Üí Adiciona todos arquivos da pasta atual\n\n`git add nome-do-arquivo` ‚Üí Adiciona o arquivo\n\n# 09\n\n**git commit** ‚Üí Permite a cria√ß√£o de um novo **commit**, isto √© uma nova **fotografia/snapshot** do c√≥digo em um determinado momento do tempo.\n\nSintaxe: `git commit -m \"Descri√ß√£o da altera√ß√£o\"`\n\n\u003caside\u003e üí° N√£o se esque√ßa das aspas aqui\n\n\u003c/aside\u003e\n\n# 10\n\n**git push** ‚Üí Sobe os commits realizados para o github (ou outra plataforma de nuvem)\n\nSintaxe: `git push origin nome-da-branch`","lastmodified":"2022-07-20T20:15:57.389243379Z","tags":null},"/Tutoriais/Usando-o-DevTools":{"title":"","content":"oobsi# Usando o Devtools\n\n# O que √© o Devtools\n\nAs _devtools_ (ferramentas de dev), s√£o um conjunto de ferramentas constru√≠das direto no navegador de internet (como o Chrome ou o Firefox). As devtools podem nos ajudar a editar as p√°ginas enquanto elas est√£o sendo exibidas, e diagnosticar problemas rapidamente, o que, em √∫ltima inst√¢ncia, nos ajuda a construir sites melhores, mais r√°pido. No nosso caso, vamos usar o **Google Chrome.**\n\n## Abrindo o DevTools\n\nExistem muitas formas de se abrir as DevTools, porque situa√ß√µes diferentes requerem acesso r√°pido a partes diferentes de sua interface.\n\n-   Quando queremos trabalhar com a DOM, ou o CSS, √© s√≥ clicar com o bot√£o direito em um elemento da p√°gina e escolher ‚ÄúInspecionar elemento‚Äù. Assim, cairemos na aba de **Elementos**. Ou, aperte Cmd+Option+C (no Mac) ou Ctrl+Shift+C (no Windows e Linux);\n-   Quando queremos ver mensagens **log**, ou rodar JavaScript, basta apertar Cmd+Option+J (no Mac), ou Ctrl+Shift+J, para ir direto para o painel de **Console**\n\nGuia de Elementos\n\nQuando voc√™ quiser olhar para algum elemento espec√≠fico da p√°gina para ver seu nome, estilos e atributos, clique no elemento com o bot√£o direito e selecione **Inspecionar**\n\n![[Pasted image 20220712144855.png]]\n\nOu aperte Cmd+Option+C (no Mac) ou Ctrl+Shift+C (no Windows e Linux);\n\n\u003caside\u003e üí° Em breve v√≠deo aqui sobre a parte de elementos\n\n\u003c/aside\u003e\n\n# Guia de Console\n\nWeb developers often log messages to the Console to make sure that their JavaScript is working as expected. To log a message, you insert an expression like¬†`console.log('Hello, Console!')`¬†into your JavaScript. When the browser executes your JavaScript and sees an expression like that, it knows that it's supposed to log the message to the Console. For example, suppose that you're in the process of writing the HTML and JavaScript for a page:\n\nDevs frequentemente usam mensagens no **console** para ter certeza de que o c√≥digo est√° funcionando como devia. Para colocar uma mensagem no console, voc√™ pode inserir uma express√£o como `console.log(\"Hey, Mundo!\")` no seu c√≥digo JavaScript. Quando o navegador executar seu c√≥digo e encontrar esta express√£o, vai saber que deve mostrar a mensagem no console. Por exemplo, suponha que voc√™ escreveu o c√≥digo de HTML e JavaScript abaixo:\n\n```html\n\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n\u003chead\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n\u003ch1\u003eHey, Mundo!\u003c/h1\u003e\n    \u003cscript\u003e\n      console.log('Carregando...');\n      console.log('Hey, Console!');\n    \u003c/script\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n```\n\nA imagem abaixo mostra como esse c√≥digo seria carregado no navegador.\n\nDo lado esquerdo temos a p√°gina carregada. Do lado direito, temos as mensagens sendo exibidas no console.\n\n![[Pasted image 20220712144922.png]]\n\nEm linhas gerais, devs utilizam o console para duas func√µes principais:\n\n-   Verificar se o c√≥digo est√° sendo executado na ordem certa\n-   Inspecionar valores de vari√°veis em dado momento da execu√ß√£o do c√≥digo.\n\n√â atrav√©s do console que vamos ver o que praticamos no JavaScript nas pr√≥ximas aulas!","lastmodified":"2022-07-20T20:15:57.389243379Z","tags":null},"/Tutoriais/autenticando":{"title":"Autenticando no Github","content":"\n# Autenticando no Github\n\nAntes de come√ßar, certifique-se que voc√™ possua o **GitBash** ou algum terminal que permita escrever em Bash e usar os comandos do Git. Se n√£o tiver, realize o download de acordo com [esse guia](https://www.canva.com/design/DAFBPzOHcMQ/view).\n\nTudo pronto? Vamos l√°!\n\n1. Fa√ßa o Login no Github clicando **[aqui](https://github.com/login)**;\n2. Na p√°gina principal, clique no √≠cone da sua foto, que fica no canto superior direito onde est√° sua foto (op√ß√£o _view profile and more_), e selecione a op√ß√£o **Settings**;\n\n![[github (2).png]]\n\n\n3. Na tela de settings, v√° descendo entre as op√ß√µes do lado esquerdo, e selecione **Developer Settings**\n\n![[New Project.png]]\n\n\n4. Em seguida, clique na op√ß√£o **Personal access tokens**, e na lista que aparecer√° ao lado, selecione **Generate new token**. Ao fazer isso, √© poss√≠vel que pe√ßam novamente sua senha. Digite a senha normalmente e podemos prosseguir.\n   \n![[New Project (1).png]]\n\n\n5. Defina as configura√ß√µes do novo Token. As configura√ß√µes que precisam ser definidas s√£o: Nome do Token, Dura√ß√£o do token (aqui sugerimos 365 dias, que pode ser definido escolhendo a op√ß√£o _Custom_), e suas permiss√µes. Para o que vamos fazer aqui na Labenu, basta preencher as op√ß√µes que est√£o em **repo**. \n\n![[config token.png]]\n\n6. **Copie o token gerado.**¬†Ele n√£o vai aparecer de novo para voc√™!\n\n![[tela de token.png]]\n\n7. Pronto, pode seguir para os passos dos exerc√≠cios e quando for dar o primeiro `git push`, insira esse **token** no lugar onde for requisitada a sua **senha**!","lastmodified":"2022-07-20T20:15:57.389243379Z","tags":null}}